[gd_scene load_steps=4 format=3 uid="uid://cth4gd35m1nbd"]

[sub_resource type="Shader" id="Shader_tw4tk"]
resource_local_to_scene = true
code = "shader_type spatial;
render_mode unshaded;
//render_mode unshaded, world_vertex_coords; // to raymarch in world space

varying vec3 world_camera;
varying vec3 world_position;

const int MAX_STEPS = 100;
const float MAX_DIST = 100.0;
const float SURF_DIST = 1e-3;

float distance_to_sphere (vec3 p, vec3 centrum, float radius) {
    return length(centrum-p) - radius;
}

float distance_to_torus(vec3 p, float radius, float thikness){
	return length(vec2(length(p.xz) - radius, p.y)) - thikness; //torus;
}

// infinte repetitions
// adapted from https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm
vec3 opRep(vec3 p, vec3 c) {
    vec3 q = mod(p+0.5*c,c)-0.5*c;
    return q;
}

float get_distance(vec3 p) {
	p = opRep(p, vec3(3)); // uncomment for repeating spheres
	return distance_to_torus(p, .5, .1);
//	return distance_to_sphere(p, vec3(0), 1.0);
}

float RayMarch(vec3 ro, vec3 rd) {
	float dO = 0.0;
	float dS;
	
	for (int i = 0; i < MAX_STEPS; i++)
	{
		vec3 p = ro + dO * rd;
		dS = get_distance(p);
		dO += dS;
		
		if (dS < SURF_DIST || dO > MAX_DIST)
			break;
	}
	return dO;
}

vec3 GetNormal(vec3 p) {
	vec2 e = vec2(1e-2, 0);
	
	vec3 n = get_distance(p) - vec3(
		get_distance(p - e.xyy),
		get_distance(p - e.yxy),
		get_distance(p - e.yyx)
	);
	
	return normalize(n);
}

void vertex() {
	world_position = VERTEX;
	world_camera = (inverse(MODELVIEW_MATRIX) * vec4(0, 0, 0, 1)).xyz; //object space
	//world_camera = (INV_VIEW_MATRIX  * vec4(0, 0, 0, 1)).xyz; //uncomment this to raymarch in world space
}

void fragment() {
	
	vec3 ro = world_camera;
	vec3 rd =  normalize(world_position - ro);
	
	vec3 col;
	
	float d = RayMarch(ro, rd);

	if (d >= MAX_DIST)
		discard;
	else
	{
		vec3 p = ro + rd * d;
		vec3 n = GetNormal(p);
		col = n.rgb;
	}
	
	ALBEDO = col;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_a8jbx"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_tw4tk")

[sub_resource type="BoxMesh" id="BoxMesh_lkmfm"]
resource_local_to_scene = true
material = SubResource("ShaderMaterial_a8jbx")
size = Vector3(10, 10, 10)

[node name="root" type="Node3D"]

[node name="raymarch_cube_no_depth" type="MeshInstance3D" parent="."]
mesh = SubResource("BoxMesh_lkmfm")
